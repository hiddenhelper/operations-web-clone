import { ClientModel, GeneralModel, ProjectModel } from '../../models';

export enum ActionType {
  FETCH_CLIENT_START = '[client] fetch client start',
  FETCH_SELF_COMPANY_START = '[client] fetch self company start',
  FETCH_SELF_COMPANY_SUCCESS = '[client] fetch self company success',
  FETCH_DRAFT_CLIENT_START = '[client] fetch draft client start',
  FETCH_CLIENT_SUCCESS = '[client] fetch client success',
  FETCH_CLIENT_LIST_SUCCESS = '[client] fetch client list success',
  FETCH_CLIENT_LIST_START = '[client] fetch client list start',
  FETCH_CLIENT_SUMMARY_START = '[client] fetch client summary start',
  FETCH_SUBCONTRACTOR_LIST_START = '[client] fetch subcontractor list start',
  SAVE_CLIENT_START = '[client] save client start',
  SAVE_CLIENT_SUCCESS = '[client] save client success',
  INVITE_DRAFT_CLIENT_START = '[client] invite draft client start',
  INVITE_DRAFT_CLIENT_SUCCESS = '[client] invite draft client success',
  UPDATE_DRAFT_CLIENT_START = '[client] update draft client start',
  UPDATE_DRAFT_CLIENT_SUCCESS = '[client] update draft client success',
  SEND_FOR_APPROVE_CLIENT_START = '[client] send for approve client start',
  APPROVE_CLIENT_START = '[client] approve client start',
  FETCH_MWBE_START = '[client] fetch mbe/wbe start',
  FETCH_MWBE_SUCCESS = '[client] fetch mbe/wbe success',
  FETCH_TRADES_START = '[client] fetch trades start',
  FETCH_TRADES_SUCCESS = '[client] fetch trades success',
  FETCH_USER_CLIENT_LIST_START = '[client] user client list start',
  FILTER_START = '[client] filter start',
  FETCH_PROJECT_CLIENT_LIST_START = '[client] fetch project client list start',
  FETCH_PROJECT_CLIENT_LIST_SUCCESS = '[client] fetch project client list success',
  SEARCH_CLIENT_START = '[client] search client start',
  CLEAR_CLIENT_MAP = '[client] clear client map',
  DELETE_CLIENT_START = '[client] delete client start',
  UPDATE_CLIENT_START = '[client] update client start',
  UPDATE_CLIENT_SUCCESS = '[client] update client success',
  ARCHIVE_CLIENT_START = '[client] archive client start',
  ARCHIVE_CLIENT_SUCCESS = '[client] archive client success',
  UNARCHIVE_CLIENT_START = '[client] unarchive client start',
  UNARCHIVE_CLIENT_SUCCESS = '[client] unarchive client success',
  FETCH_PROJECT_CLIENT_HIREARCHY_LIST_START = '[client] fetch project client hirearchy list start',
  FETCH_PROJECT_CLIENT_HIREARCHY_LIST_SUCCESS = '[client] fetch project client hirearchy list success',
  FETCH_PROJECT_CLIENT_SUMMARY_START = '[client] fetch project client summary start',
  FETCH_PROJECT_CLIENT_SUMMARY_SUCCESS = '[client] fetch project client summary success',
  UPDATE_PROJECT_CLIENT_TAX_CONDITION_START = '[client] update project client tax condition start',
  UPDATE_PROJECT_CLIENT_TAX_CONDITION_SUCCESS = '[client] update project client tax condition success',
  FETCH_ADMIN_PERMISSION_START = '[client] fetch admin permission start',
  FETCH_ADMIN_PERMISSION_SUCCESS = '[client] fetch admin permission success',
}

export const actions = {
  fetchDraftClientStart: (id: string) => ({ type: ActionType.FETCH_DRAFT_CLIENT_START, payload: { id } }),
  fetchClientStart: (id: string) => ({ type: ActionType.FETCH_CLIENT_START, payload: { id } }),
  fetchSelfClientStart: () => ({ type: ActionType.FETCH_SELF_COMPANY_START, payload: {} }),
  fetchSelfClientSuccess: (company: ClientModel.IClient) => ({ type: ActionType.FETCH_SELF_COMPANY_SUCCESS, payload: { company } }),
  fetchClientListStart: (query: GeneralModel.IQueryParams) => ({ type: ActionType.FETCH_CLIENT_LIST_START, payload: { query } }),
  fetchClientListSuccess: (list: Partial<ClientModel.IClient>[], count: number) => ({ type: ActionType.FETCH_CLIENT_LIST_SUCCESS, payload: { list, count } }),
  fetchUserClientListStart: (id: string, query: GeneralModel.IQueryParams) => ({ type: ActionType.FETCH_USER_CLIENT_LIST_START, payload: { id, query } }),
  fetchSubcontractorListStart: (query: GeneralModel.IQueryParams) => ({ type: ActionType.FETCH_SUBCONTRACTOR_LIST_START, payload: { query } }),
  fetchClientSummaryStart: (id: string) => ({ type: ActionType.FETCH_CLIENT_SUMMARY_START, payload: { id } }),
  saveClientStart: (client: ClientModel.IClient, step: GeneralModel.IStep, redirect: boolean = true, uiRelationId?: string) => ({
    type: ActionType.SAVE_CLIENT_START,
    payload: { client, step, redirect, uiRelationId },
  }),
  inviteDraftClientStart: (client: ClientModel.IClient) => ({ type: ActionType.INVITE_DRAFT_CLIENT_START, payload: { client } }),
  inviteDraftClientSuccess: (client: ClientModel.IClient) => ({ type: ActionType.INVITE_DRAFT_CLIENT_SUCCESS, payload: { client } }),
  sendApproveClientStart: (id: string) => ({ type: ActionType.SEND_FOR_APPROVE_CLIENT_START, payload: { id } }),
  approveClientStart: (id: string) => ({ type: ActionType.APPROVE_CLIENT_START, payload: { id } }),
  updateDraftClientStart: (client: ClientModel.IClient) => ({ type: ActionType.UPDATE_DRAFT_CLIENT_START, payload: { client } }),
  updateDraftClientSuccess: (client: ClientModel.IClient) => ({ type: ActionType.UPDATE_DRAFT_CLIENT_SUCCESS, payload: { client } }),
  fetchMWbeListStart: () => ({ type: ActionType.FETCH_MWBE_START, payload: {} }),
  fetchMWbeListSuccess: (list: GeneralModel.INamedEntity[]) => ({ type: ActionType.FETCH_MWBE_SUCCESS, payload: { list } }),
  fetchTradesStart: () => ({ type: ActionType.FETCH_TRADES_START, payload: {} }),
  fetchTradesSuccess: (list: GeneralModel.INamedEntity[]) => ({ type: ActionType.FETCH_TRADES_SUCCESS, payload: { list } }),
  fetchProjectClientListStart: (id: string, query: GeneralModel.IQueryParams) => ({
    type: ActionType.FETCH_PROJECT_CLIENT_LIST_START,
    payload: { id, query },
  }),
  fetchProjectClientListSuccess: (projectId: string, list: Partial<ClientModel.IClient>[], count: number) => ({
    type: ActionType.FETCH_PROJECT_CLIENT_LIST_SUCCESS,
    payload: { projectId, list, count },
  }),
  fetchProjectClientHirearchyListStart: (id: string) => ({
    type: ActionType.FETCH_PROJECT_CLIENT_HIREARCHY_LIST_START,
    payload: { id },
  }),
  fetchProjectClientHirearchyListSuccess: (list: ClientModel.IHirearchyClientProject[]) => ({
    type: ActionType.FETCH_PROJECT_CLIENT_HIREARCHY_LIST_SUCCESS,
    payload: { list },
  }),
  searchClientStart: (query: GeneralModel.IQueryParams, uiRelationId?: string) => ({
    type: ActionType.SEARCH_CLIENT_START,
    payload: { query, uiRelationId },
  }),
  deleteClientStart: (id: string, query: GeneralModel.IQueryParams) => ({ type: ActionType.DELETE_CLIENT_START, payload: { id, query } }),
  clearClientMap: () => ({ type: ActionType.CLEAR_CLIENT_MAP, payload: {} }),
  updateClientStart: (client: ClientModel.IClient) => ({ type: ActionType.UPDATE_CLIENT_START, payload: { client } }),
  updateClientSuccess: (client: ClientModel.IClient) => ({ type: ActionType.UPDATE_CLIENT_SUCCESS, payload: { client } }),
  archiveClientStart: (id: string) => ({ type: ActionType.ARCHIVE_CLIENT_START, payload: { id } }),
  archiveClientSuccess: (id: string) => ({ type: ActionType.ARCHIVE_CLIENT_SUCCESS, payload: { id } }),
  unarchiveClientStart: (id: string) => ({ type: ActionType.UNARCHIVE_CLIENT_START, payload: { id } }),
  unarchiveClientSuccess: (id: string) => ({ type: ActionType.UNARCHIVE_CLIENT_SUCCESS, payload: { id } }),
  fetchProjectClientSummaryStart: (projectId: string, clientId: string) => ({
    type: ActionType.FETCH_PROJECT_CLIENT_SUMMARY_START,
    payload: { projectId, clientId },
  }),
  fetchProjectClientSummarySuccess: (projectId: string, client: ClientModel.IClient) => ({
    type: ActionType.FETCH_PROJECT_CLIENT_SUMMARY_SUCCESS,
    payload: { projectId, client },
  }),
  updateProjectClientTaxConditionStart: (projectId: string, taxCondition: ProjectModel.IClientTaxCondition) => ({
    type: ActionType.UPDATE_PROJECT_CLIENT_TAX_CONDITION_START,
    payload: { projectId, taxCondition },
  }),
  updateProjectClientTaxConditionSuccess: (projectId: string, clientId: string, condition: boolean) => ({
    type: ActionType.UPDATE_PROJECT_CLIENT_TAX_CONDITION_SUCCESS,
    payload: { projectId, clientId, condition },
  }),
  fetchAdminPermissionStart: (id: string) => ({ type: ActionType.FETCH_ADMIN_PERMISSION_START, payload: { id } }),
  fetchAdminPermissionSuccess: (isGeneralAdmin: boolean) => ({ type: ActionType.FETCH_ADMIN_PERMISSION_SUCCESS, payload: { isGeneralAdmin } }),
};
