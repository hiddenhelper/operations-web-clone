export enum ActionType {
  FETCH_PROCORE_CLIENTS_START = '[procore] get clients start',
  FETCH_PROCORE_CLIENTS_SUCCESS = '[procore] get clients success',
  PROCORE_STATUS_START = '[procore] get status procore',
  PROCORE_STATUS_SUCCESS = '[procore] get status procore success',
  CONNECT_PROCORE_START = '[procore] connect procore',
  CONNECT_PROCORE_SUCCESS = '[procore] connect procore success',
  DISCONNECT_PROCORE_START = '[procore] disconnect procore',
  DISCONNECT_PROCORE_SUCCESS = '[procore] disconnect procore success',
  FETCH_PROCORE_PROJECTS_START = '[procore] fetch procore projects start',
  FETCH_PROCORE_PROJECTS_SUCCESS = '[procore] fetch procore projects success',
  FETCH_PROCORE_PROJECT_MAPPINGS_START = '[procore] fetch procore project mappings start',
  FETCH_PROCORE_PROJECT_MAPPINGS_SUCCESS = '[procore] fetch procore project mappings success',
  FETCH_PROCORE_VENDORS_START = '[procore] fetch procore vendors start',
  FETCH_PROCORE_VENDORS_SUCCESS = '[procore] fetch procore vendors success',
  FETCH_PROCORE_VENDOR_MAPPINGS_START = '[procore] fetch procore vendor mappings start',
  FETCH_PROCORE_VENDOR_MAPPINGS_SUCCESS = '[procore] fetch procore vendor mappings success',
  SAVE_PROCORE_PROJECT_MAPPINGS_START = '[procore] save procore project mappings start',
  SAVE_PROCORE_PROJECT_MAPPINGS_SUCCESS = '[procore] save procore project mappings success',
  SAVE_PROCORE_VENDOR_MAPPINGS_START = '[procore] save procore vendor mappings start',
  SAVE_PROCORE_VENDOR_MAPPINGS_SUCCESS = '[procore] save procore vendor mappings success',
  FETCH_PROCORE_REPORT_FREQUENCY_START = '[procore] fetch procore report frequency start',
  FETCH_PROCORE_REPORT_FREQUENCY_SUCCESS = '[procore] fetch procore report frequency success',
  SAVE_PROCORE_REPORT_FREQUENCY_START = '[procore] save procore report frequency start',
  SAVE_PROCORE_REPORT_FREQUENCY_SUCCESS = '[procore] save procore report frequency success',
}

export const actions = {
  getProcoreClientsStart: () => ({ type: ActionType.FETCH_PROCORE_CLIENTS_START, payload: {} }),
  getProcoreClientsSuccess: data => ({ type: ActionType.FETCH_PROCORE_CLIENTS_SUCCESS, payload: data }),
  getStatusProcoreStart: () => ({ type: ActionType.PROCORE_STATUS_START, payload: {} }),
  getStatusProcoreSuccess: isConnected => ({ type: ActionType.PROCORE_STATUS_SUCCESS, payload: isConnected }),
  connectProcoreStart: data => ({ type: ActionType.CONNECT_PROCORE_START, payload: { data } }),
  connectProcoreSuccess: status => ({ type: ActionType.CONNECT_PROCORE_SUCCESS, payload: status }),
  disconnectProcoreStart: () => ({ type: ActionType.DISCONNECT_PROCORE_START, payload: {} }),
  disconnectProcoreSuccess: status => ({ type: ActionType.DISCONNECT_PROCORE_SUCCESS, payload: status }),
  fetchProcoreProjectsStart: clientId => ({ type: ActionType.FETCH_PROCORE_PROJECTS_START, payload: clientId }),
  fetchProcoreProjectsSuccess: (clientId, projects) => ({ type: ActionType.FETCH_PROCORE_PROJECTS_SUCCESS, payload: { clientId, projects } }),
  fetchProcoreProjectMappingsStart: clientId => ({ type: ActionType.FETCH_PROCORE_PROJECT_MAPPINGS_START, payload: clientId }),
  fetchProcoreProjectMappingsSuccess: (clientId, mappings) => ({ type: ActionType.FETCH_PROCORE_PROJECT_MAPPINGS_SUCCESS, payload: { clientId, mappings } }),
  fetchProcoreVendorsStart: clientId => ({ type: ActionType.FETCH_PROCORE_VENDORS_START, payload: clientId }),
  fetchProcoreVendorsSuccess: (clientId, vendors) => ({ type: ActionType.FETCH_PROCORE_VENDORS_SUCCESS, payload: { clientId, vendors } }),
  fetchProcoreVendorMappingsStart: clientId => ({ type: ActionType.FETCH_PROCORE_VENDOR_MAPPINGS_START, payload: clientId }),
  fetchProcoreVendorMappingsSuccess: (clientId, mappings) => ({ type: ActionType.FETCH_PROCORE_VENDOR_MAPPINGS_SUCCESS, payload: { clientId, mappings } }),
  saveProcoreProjectMappingsStart: (clientId, mappings) => ({ type: ActionType.SAVE_PROCORE_PROJECT_MAPPINGS_START, payload: { clientId, mappings } }),
  saveProcoreProjectMappingsSuccess: (clientId, projects) => ({ type: ActionType.SAVE_PROCORE_PROJECT_MAPPINGS_SUCCESS, payload: { clientId, projects } }),
  saveProcoreVendorMappingsStart: (clientId, mappings) => ({ type: ActionType.SAVE_PROCORE_VENDOR_MAPPINGS_START, payload: { clientId, mappings } }),
  saveProcoreVendorMappingsSuccess: (clientId, projects) => ({ type: ActionType.SAVE_PROCORE_VENDOR_MAPPINGS_SUCCESS, payload: { clientId, projects } }),
  fetchProcoreReportFrequencyStart: clientId => ({ type: ActionType.FETCH_PROCORE_REPORT_FREQUENCY_START, payload: clientId }),
  fetchProcoreReportFrequencySuccess: frequency => ({ type: ActionType.FETCH_PROCORE_REPORT_FREQUENCY_SUCCESS, payload: { frequency } }),
  saveProcoreReportFrequencyStart: (clientId, frequency) => ({ type: ActionType.SAVE_PROCORE_REPORT_FREQUENCY_START, payload: { clientId, frequency } }),
  saveProcoreReportFrequencySuccess: frequency => ({ type: ActionType.SAVE_PROCORE_REPORT_FREQUENCY_SUCCESS, payload: { frequency } }),
};
