import { WorkerModel, GeneralModel, ConsentFormModel } from '../../models';

export enum ActionType {
  SAVE_WORKER_START = '[worker] save worker start',
  UPDATE_WORKER_START = '[worker] update worker start',
  UPDATE_WORKER_SUCCESS = '[worker] update worker success',
  FETCH_WORKER_START = '[worker] fetch worker start',
  FETCH_WORKER_LIST_START = '[worker] fetch worker list start',
  FETCH_WORKER_LIST_SUCCESS = '[worker] fetch worker list success',
  CLEAR_WORKER_MAP = '[worker] clear worker map',
  CLEAR_WORKER_ACTIVITY_LIST = '[worker] clear worker activity list',
  CLEAR_WORKER_OBSERVATION_LIST = '[worker] clear worker observation list',
  FETCH_ETHNICITY_START = '[worker] fetch ethnicity list start',
  FETCH_ETHNICITY_SUCCESS = '[worker] fetch ethnicity list success',
  FETCH_LANGUAGE_START = '[worker] fetch language list start',
  FETCH_LANGUAGE_SUCCESS = '[worker] fetch language list success',
  FETCH_SKILLED_TRADE_START = '[worker] fetch skilled trade list start',
  FETCH_SKILLED_TRADE_SUCCESS = '[worker] fetch skilled trade list success',
  FETCH_IDENTIFICATION_TYPE_START = '[worker] fetch identification type list start',
  FETCH_IDENTIFICATION_TYPE_SUCCESS = '[worker] fetch identification type list success',
  FETCH_CERTIFICATION_LIST_START = '[worker] fetch certification list start',
  FETCH_CERTIFICATION_LIST_SUCCESS = '[worker] fetch certification list success',
  ADD_CERTIFICATION_START = '[worker] add certification start',
  ADD_CERTIFICATION_SUCCESS = '[worker] add certification success',
  FETCH_WORKER_PROJECT_LIST_START = '[worker] fetch worker project list start',
  FETCH_WORKER_PROJECT_LIST_SUCCESS = '[worker] fetch worker project list success',
  FETCH_PROJECT_WORKER_LIST_START = '[worker] fetch project worker list start',
  FETCH_PROJECT_WORKER_LIST_SUCCESS = '[worker] fetch project worker list success',
  FETCH_WORKER_PROJECT_ASSIGN_LIST_START = '[worker] fetch project worker assign list start',
  FETCH_CLIENT_WORKER_LIST_START = '[worker] fetch client worker list start',
  FETCH_CLIENT_WORKER_LIST_SUCCESS = '[worker] fetch client worker list success',
  FETCH_CONSENT_FORM_START = '[worker] fetch consent form start',
  FETCH_CONSENT_FORM_SUCCESS = '[worker] fetch consent form success',
  CLEAR_CONSENT_FORM = '[worker] clear consent form',
  SAVE_CONSENT_FORM_START = '[worker] save consent form start',
  FETCH_WORKER_ACTIVITY_START = '[worker] fetch worker activity start',
  FETCH_WORKER_ACTIVITY_SUCCESS = '[worker] fetch worker activity success',
  FETCH_WORKER_OBSERVATIONS_START = '[worker] fetch worker observation list start',
  FETCH_WORKER_OBSERVATIONS_SUCCESS = '[worker] fetch worker observation list success',
  FETCH_WORKER_OBSERVATION_START = '[worker] fetch worker observation',
  FETCH_WORKER_OBSERVATION_SUCCESS = '[worker] fetch worker observation success',
  DOWNLOAD_CONSENT_FORM_START = '[worker] download consent form start',
  FETCH_GEOGRAPHIC_LOCATIONS_START = '[worker] fetch geographic locations list start',
  FETCH_GEOGRAPHIC_LOCATIONS_SUCCESS = '[worker] fetch geographic locations list success',
  FETCH_JOB_TITLES_START = '[worker] fetch job titles start',
  FETCH_JOB_TITLES_SUCCESS = '[worker] fetch job titles success',
  FETCH_SOC_JOB_TITLES_START = '[worker] fetch soc job titles start',
  FETCH_SOC_JOB_TITLES_SUCCESS = '[worker] fetch soc job titles success',
  FETCH_TRADE_STATUSES_START = '[worker] fetch trade statuses start',
  FETCH_TRADE_STATUSES_SUCCESS = '[worker] fetch trade statuses success',
  FETCH_LANGUAGE_TURNER_PROTOCOLS_START = '[worker] fetch language turner protocols start',
  FETCH_LANGUAGE_TURNER_PROTOCOLS_SUCCESS = '[worker] fetch language turner protocols success',
}

export const actions = {
  saveWorkerStart: (worker: WorkerModel.IWorker) => ({ type: ActionType.SAVE_WORKER_START, payload: { worker } }),
  updateWorkerStart: (worker: WorkerModel.IWorker) => ({ type: ActionType.UPDATE_WORKER_START, payload: { worker } }),
  updateWorkerSuccess: (worker: WorkerModel.IWorker) => ({ type: ActionType.UPDATE_WORKER_SUCCESS, payload: { worker } }),
  fetchWorkerStart: (id: string) => ({ type: ActionType.FETCH_WORKER_START, payload: { id } }),
  fetchWorkerListStart: (query: GeneralModel.IQueryParams) => ({ type: ActionType.FETCH_WORKER_LIST_START, payload: { query } }),
  fetchWorkerListSuccess: (list: WorkerModel.IWorker[], count: number) => ({ type: ActionType.FETCH_WORKER_LIST_SUCCESS, payload: { list, count } }),
  fetchEthnicityListStart: () => ({ type: ActionType.FETCH_ETHNICITY_START, payload: {} }),
  fetchEthnicityListSuccess: (list: WorkerModel.IEthnicity[]) => ({ type: ActionType.FETCH_ETHNICITY_SUCCESS, payload: { list } }),
  fetchLanguageListStart: () => ({ type: ActionType.FETCH_LANGUAGE_START, payload: {} }),
  fetchLanguageListSuccess: (list: WorkerModel.IEthnicity[]) => ({ type: ActionType.FETCH_LANGUAGE_SUCCESS, payload: { list } }),
  fetchSkilledTradeListStart: () => ({ type: ActionType.FETCH_SKILLED_TRADE_START, payload: {} }),
  fetchSkilledTradeListSuccess: (list: WorkerModel.IEthnicity[]) => ({ type: ActionType.FETCH_SKILLED_TRADE_SUCCESS, payload: { list } }),
  fetchIdentificationTypeListStart: () => ({ type: ActionType.FETCH_IDENTIFICATION_TYPE_START, payload: {} }),
  fetchIdentificationTypeListSuccess: (list: WorkerModel.IIdentificationType[]) => ({
    type: ActionType.FETCH_IDENTIFICATION_TYPE_SUCCESS,
    payload: { list },
  }),
  fetchProjectListStart: (id: string) => ({ type: ActionType.FETCH_WORKER_PROJECT_LIST_START, payload: { id } }),
  fetchProjectListSuccess: (list: GeneralModel.INamedEntity[]) => ({ type: ActionType.FETCH_WORKER_PROJECT_LIST_SUCCESS, payload: { list } }),
  clearWorkerMap: () => ({ type: ActionType.CLEAR_WORKER_MAP, payload: {} }),
  clearWorkerActivityList: () => ({ type: ActionType.CLEAR_WORKER_ACTIVITY_LIST, payload: {} }),
  clearWorkerObservationList: () => ({ type: ActionType.CLEAR_WORKER_OBSERVATION_LIST, payload: {} }),
  fetchProjectWorkerListStart: (id: string, query: GeneralModel.IQueryParams) => ({
    type: ActionType.FETCH_PROJECT_WORKER_LIST_START,
    payload: { id, query },
  }),
  fetchProjectWorkerListSuccess: (projectId: string, list: WorkerModel.IWorker[], count: number) => ({
    type: ActionType.FETCH_PROJECT_WORKER_LIST_SUCCESS,
    payload: { projectId, list, count },
  }),
  fetchClientWorkerListStart: (id: string, query: GeneralModel.IQueryParams) => ({ type: ActionType.FETCH_CLIENT_WORKER_LIST_START, payload: { id, query } }),
  fetchClientWorkerListSuccess: (clientId: string, list: Partial<WorkerModel.IWorker>[], count: number) => ({
    type: ActionType.FETCH_CLIENT_WORKER_LIST_SUCCESS,
    payload: { clientId, list, count },
  }),
  fetchWorkerProjectAssignListStart: (query: GeneralModel.IQueryParams) => ({ type: ActionType.FETCH_WORKER_PROJECT_ASSIGN_LIST_START, payload: { query } }),
  fetchConsentFormStart: (workerId: string, projectId: string, isEditable: boolean) => ({
    type: ActionType.FETCH_CONSENT_FORM_START,
    payload: { workerId, projectId, isEditable },
  }),
  fetchConsentFormSuccess: (consentForm: ConsentFormModel.IConsentForm) => ({ type: ActionType.FETCH_CONSENT_FORM_SUCCESS, payload: { consentForm } }),
  clearConsentForm: () => ({ type: ActionType.CLEAR_CONSENT_FORM, payload: {} }),
  saveConsentFormStart: (workerId: string, projectId: string, data: ConsentFormModel.IProjectInformationForm) => ({
    type: ActionType.SAVE_CONSENT_FORM_START,
    payload: { workerId, projectId, data },
  }),
  fetchWorkerActivityStart: (id: string, query: GeneralModel.IQueryParams) => ({ type: ActionType.FETCH_WORKER_ACTIVITY_START, payload: { id, query } }),
  fetchWorkerActivitySuccess: (list: Partial<WorkerModel.IWorkerActivity>[], count: number) => ({
    type: ActionType.FETCH_WORKER_ACTIVITY_SUCCESS,
    payload: { list, count },
  }),
  fetchWorkerObservationListStart: (id: string, query: GeneralModel.IQueryParams) => ({
    type: ActionType.FETCH_WORKER_OBSERVATIONS_START,
    payload: { id, query },
  }),
  fetchWorkerObservationsSuccess: (list: Partial<WorkerModel.IWorkerObservation>[], count: number) => ({
    type: ActionType.FETCH_WORKER_OBSERVATIONS_SUCCESS,
    payload: { list, count },
  }),
  fetchWorkerObservationStart: (workerId: string, id: string) => ({ type: ActionType.FETCH_WORKER_OBSERVATION_START, payload: { id, workerId } }),
  fetchWorkerObservationSuccess: (observation: WorkerModel.IWorkerObservation) => ({
    type: ActionType.FETCH_WORKER_OBSERVATION_SUCCESS,
    payload: { observation },
  }),
  downloadConsentFormStart: (id: string, projectId: string, name: string) => ({
    type: ActionType.DOWNLOAD_CONSENT_FORM_START,
    payload: { id, projectId, name },
  }),
  fetchGeographicLocationsListStart: () => ({ type: ActionType.FETCH_GEOGRAPHIC_LOCATIONS_START, payload: {} }),
  fetchGeographicLocationsListSuccess: (list: WorkerModel.IGeographicLocation[]) => ({
    type: ActionType.FETCH_GEOGRAPHIC_LOCATIONS_SUCCESS,
    payload: { list },
  }),
  fetchJobTitlesStart: () => ({ type: ActionType.FETCH_JOB_TITLES_START, payload: {} }),
  fetchJobTitlesSuccess: (list: WorkerModel.IJobTitle[]) => ({
    type: ActionType.FETCH_JOB_TITLES_SUCCESS,
    payload: { list },
  }),
  fetchSocJobTitlesStart: () => ({ type: ActionType.FETCH_SOC_JOB_TITLES_START, payload: {} }),
  fetchSocJobTitlesSuccess: (list: WorkerModel.ISocJobTitle[]) => ({
    type: ActionType.FETCH_SOC_JOB_TITLES_SUCCESS,
    payload: { list },
  }),
  fetchTradeStatusesStart: () => ({ type: ActionType.FETCH_TRADE_STATUSES_START, payload: {} }),
  fetchTradeStatusesSuccess: (list: WorkerModel.ITradeStatus[]) => ({
    type: ActionType.FETCH_TRADE_STATUSES_SUCCESS,
    payload: { list },
  }),
  fetchLanguageTurnerProtocolsStart: () => ({ type: ActionType.FETCH_LANGUAGE_TURNER_PROTOCOLS_START, payload: {} }),
  fetchLanguageTurnerProtocolsSuccess: (list: WorkerModel.ILanguageTurnerProtocol[]) => ({
    type: ActionType.FETCH_LANGUAGE_TURNER_PROTOCOLS_SUCCESS,
    payload: { list },
  }),
};
